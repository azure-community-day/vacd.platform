name: 'Terraform'

on:
  push:
    branches:
    - master
  pull_request:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    # Checkout the repository to the GitHub Actions runner
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token 
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: cd Terraform && terraform init -no-color

    # Validates the Terraform syntax
    - name: Terraform Validate
      run: cd Terraform && terraform validate -no-color

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: cd Terraform && terraform plan -no-color -var "asp_name=api-github-appserviceplan3" -var "app_name=api-github-azurecommunityday3" -var subscription_id=${{ secrets.SUBSCRIPTION_ID }} -var tenant_id=${{ secrets.TENANT_ID }} -var client_id=${{ secrets.CLIENT_ID }} -var client_secret=${{ secrets.CLIENT_SECRET }} -out infraplan
    
      # On push to master, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      id: tf_apply
      run: |
        cd Terraform && terraform apply -no-color -auto-approve infraplan
        echo ::set-env name=WEBAPPNAME::$(terraform output name)
        echo ::set-env name=RSG::$(terraform output resource_group)
        
    - name: Login via Az module
      uses: azure/login@v1.1
      with:
        creds: ${{secrets.AZURE_CREDENTIALS}}
        enable-AzPSSession: true 
        
    - name: Get Publish Settings from WebApp
      id: get_publishSettings
      uses: azure/powershell@v1
      env:
        WEBAPPNAME: ${{ env.WEBAPPNAME }} 
        RSG: ${{ env.RSG }}
      with:
        inlineScript: |
          $webappname = $Env:WEBAPPNAME.split("::")[10].Trim()
          Write-Host "WebAppName: $($webappname)"
          $rsgname = $Env:RSG.split("::")[10].Trim()
          Write-Host "ResourceGroup: $($rsgname)"
          $publishSettings = Get-AzWebAppPublishingProfile -Format WebDeploy -Name $webappname -ResourceGroupName $rsgname -OutputFile "outputfile.publishsettings" -IncludeDisasterRecoveryEndpoints
        azPSVersion: 'latest'
        
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.300
    
    - name: 'Restore with dotnet'
      run: cd ConsoleSync && dotnet restore
    
    - name: 'Build with dotnet'
      run: cd ConsoleSync && dotnet build --configuration Release -r linux-x64
    
    - name: 'Publish with dotnet'
      run: cd ConsoleSync && dotnet publish --configuration Release -o published -r linux-x64 -f netcoreapp3.1
    
    - name: Run ConsoleSync
      run: |
        var=`cat outputfile.publishsettings`
        #publish_settings=$(echo $var | sed -e 's/\r//g')
        publish_settings=$(echo $var | sed -e 's/<?xml version="1.0" encoding="utf-8"?> //g' | sed -e 's/> </></g')
        #echo "$publish_settings"
        ./ConsoleSync/published/ConsoleSync "${{ secrets.ORG_PAT }}" "$publish_settings"

        
